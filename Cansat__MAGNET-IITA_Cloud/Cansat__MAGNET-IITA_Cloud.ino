#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Cansat_ IITA"
  https://create.arduino.cc/cloud/things/431c8ba7-e850-406f-928c-5b69d3e23c0c

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String altitud;
  String humedad;
  String magnetismo_x;
  String magnetismo_y;
  String magnetismo_z;
  String nro_packet;
  String presion_absoluta;
  String presion_base;
  String temperatura;
  float altitud_chart;
  float magnetismo_x_chart;
  float magnetismo_y_chart;
  float magnetismo_z_chart;
  float presion_absoluta_chart;
  float presion_base_chart;
  float temperatura_chart;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include <LoRa.h>
#include <SPI.h>
#include "thingProperties.h"

char Version[] = "v2.6 - 15/03/2023";

//Defino los pines a ser usados por el modulo transceptor LoRa
#define CS    18      // Pin de CS del módulo LoRa
#define RST   14      // Pin de Reset del módulo LoRa
#define IRQ   7      // Pin del IRQ del módulo LoRa
#define LED   25     // Pin del LED onboard

#define SERIAL_BAUDRATE   115200    // Velocidad del Puerto Serie

// Configuraciones del módulo LoRa. Tener en cuenta que esta configuración debe ser igual en el Rx!
// 433E6 for Asia
// 866E6 for Europe
// 915E6 for North America 
// 915E6 to 928E3 for Argentina
#define LORA_FREQUENCY      915000000  // Frecuencia en Hz a la que se quiere transmitir.
#define LORA_SYNC_WORD      0xF3       // Byte value to use as the sync word, defaults to 0x12
#define LORA_POWER          17         // TX power in dB, defaults to 17. Supported values are 2 to 20 for PA_OUTPUT_PA_BOOST_PIN, and 0 to 14 for PA_OUTPUT_RFO_PIN.
#define LORA_SPREAD_FACTOR  7          // Spreading factor, defaults to 7. Supported values are between 6 and 12 (En Argentina se puede utilizar entre 7 a 10)
#define LORA_SIG_BANDWIDTH  125E3      // Signal bandwidth in Hz, defaults to 125E3. Supported values are 7.8E3, 10.4E3, 15.6E3, 20.8E3, 31.25E3, 41.7E3, 62.5E3, 125E3, 250E3, and 500E3 
#define LORA_CODING_RATE    5          // Denominator of the coding rate, defaults to 5. Supported values are between 5 and 8, these correspond to coding rates of 4/5 and 4/8. The coding rate numerator is fixed at 4.

double bitRate;


void setup() {


  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  // Set Led onboard con Output
  pinMode(LED, OUTPUT);
  
  //Incializo el Serial Monitor
  Serial.begin(SERIAL_BAUDRATE);
  
  while (!Serial) 
  {
    // Mientras el COM no esté disponible el LED onbooard encendido
    digitalWrite(LED, HIGH);  
  }

  // Apaga el LED si se conecta al COM
  digitalWrite(LED, LOW);  
  
  Serial.println("LoRa Receiver");

  // Inicializar módulo LoRa
  LoRa.setPins(CS, RST, IRQ);
  while (!LoRa.begin(LORA_FREQUENCY)) 
  {
    Serial.println(".");
    delay(500);
  }
  
  // Change sync word (0xF3) to match the receiver
  // The sync word assures you don't get LoRa messages from other LoRa transceivers
  // ranges from 0-0xFF
  LoRa.setSyncWord(LORA_SYNC_WORD);
  LoRa.setTxPower(LORA_POWER);              
  LoRa.setSpreadingFactor(LORA_SPREAD_FACTOR);           
  LoRa.setSignalBandwidth(LORA_SIG_BANDWIDTH);
  LoRa.setCodingRate4(LORA_CODING_RATE);  
  
  // Calculo del BitRate = (SF * (BW / 2 ^ SF)) * (4.0 / CR)
  bitRate = (LORA_SPREAD_FACTOR * (LORA_SIG_BANDWIDTH / pow(2, LORA_SPREAD_FACTOR))) * (4.0 / LORA_CODING_RATE);
  
  Serial.println("LoRa Initializing OK!");
}

void loop() {
  ArduinoCloud.update();
  
  // Trato de parsear el paquete  
  int packetSize = LoRa.parsePacket();
  
  if (packetSize) 
  {     
    // Encender LED onboard
    digitalWrite(LED, HIGH);  
  
    // Paquete recibido
    // Lectura del paquete
    while (LoRa.available()) 
    {
      String LoRaData = LoRa.readString();
      // Serial.println(LoRaData);
      
      //Serial.print("RX - Version ");     
      //Serial.println(Version);      
  
      //Serial.print("LoRa BitRate: ");
      //Serial.print(bitRate);
      //Serial.println(" bps");
            
      //Serial.print("Telemetria RAW Recibida ");
      //Serial.println(LoRaData); 
        
      int indicador1 = LoRaData.indexOf(',');
      nro_packet = LoRaData.substring(0, indicador1);
      
      int indicador2 = LoRaData.indexOf(',', indicador1+1);
      presion_base = LoRaData.substring(indicador1+1, indicador2) + " Pa";
      presion_base_chart = LoRaData.substring(indicador1+1, indicador2).toFloat();
      
      int indicador3 = LoRaData.indexOf(',', indicador2+1);
      presion_absoluta = LoRaData.substring(indicador2+1, indicador3) + " Pa";
      presion_absoluta_chart = LoRaData.substring(indicador2+1, indicador3).toFloat();


      int indicador4 = LoRaData.indexOf(',', indicador3+1);
      altitud = LoRaData.substring(indicador3+1, indicador4) + " M.s.n.m";
      altitud_chart = LoRaData.substring(indicador3+1, indicador4).toFloat();
      
      
      int indicador5 = LoRaData.indexOf(',', indicador4+1);
      temperatura = LoRaData.substring(indicador4+1, indicador5) + " °C";
      temperatura_chart = LoRaData.substring(indicador4+1, indicador5).toFloat();

      
      int indicador6 = LoRaData.indexOf(',', indicador5+1);
      magnetismo_x = LoRaData.substring(indicador5+1, indicador6) + " µT";
      magnetismo_x_chart = LoRaData.substring(indicador5+1, indicador6).toFloat();
      

      int indicador7 = LoRaData.indexOf(',', indicador6+1);
      magnetismo_y = LoRaData.substring(indicador6+1, indicador7) + " µT";
      magnetismo_y_chart = LoRaData.substring(indicador6+1, indicador7).toFloat();

      int indicador8 = LoRaData.indexOf(',', indicador7+1);
      magnetismo_z = LoRaData.substring(indicador7+1, indicador8) + " µT";
      magnetismo_z_chart = LoRaData.substring(indicador7+1, indicador8).toFloat();
      
      
      // Message to print in Serial port
    //Serial.println("[Packet Number],[Presion Base],[Presion Absoluta],[Altura],[Temperatura],");
      Serial.println(nro_packet + "," + presion_base + "," + presion_absoluta + "," + altitud + "," + temperatura + "," + magnetismo_x + "," + magnetismo_y + "," + magnetismo_z);  
    }
    
    // Nivel de señal RSSI del paquete
    //Serial.print("Nivel de señal [RSSI]: ");
    //Serial.println(LoRa.packetRssi());
    //Serial.println("=====================================================================");


    
    // Apagar LED onboard
    digitalWrite(LED, LOW); 
  }
  
}















