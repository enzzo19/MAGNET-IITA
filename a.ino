/* 
  Sketch generated by the Arduino IoT Cloud Thing "CANSAT IITA 2023"
  https://create.arduino.cc/cloud/things/aef51ba1-ae9b-49b9-b54f-3c2982d2abe4 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humedad;
  float humedad_chart;
  float temperatura;
  float temperatura_chart;
  int nro_packet;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include "heltec.h" 
#include "images.h"

#define BAND    433E6  //you can set band here directly,e.g. 868E6,915E6
String rssi = "RSSI --";
String packSize = "--";
String packet ;
// Declarar las variables
String n_packet_string;
String temperatura_string;
String humedad_string;


void logo(){
  Heltec.display->clear();
  Heltec.display->drawXbm(0,5,logo_width,logo_height,logo_bits);
  Heltec.display->display();
}

void LoRapacket(){
  Heltec.display->clear();
  Heltec.display->setTextAlignment(TEXT_ALIGN_LEFT);
  Heltec.display->setFont(ArialMT_Plain_10);
  Heltec.display->drawString(0 , 15 , "Received "+ packSize + " bytes");
  Heltec.display->drawStringMaxWidth(0 , 26 , 128, packet);
  Heltec.display->drawString(0, 0, rssi);  
  Heltec.display->display();
}

void cbk(int packetSize) {
  packet ="";
  packSize = String(packetSize,DEC);
  for (int i = 0; i < packetSize; i++) { packet += (char) LoRa.read(); }
  Serial.println(packet);

  
  // Dividir la cadena en partes utilizando la coma como separador
  int comma1 = packet.indexOf(",");
  int comma2 = packet.lastIndexOf(",");
  
  n_packet_string = packet.substring(0, comma1);
  temperatura_string = packet.substring(comma1 + 1, comma2);
  humedad_string = packet.substring(comma2 + 1);
  
  // Convertir los valores en números si es necesario
  nro_packet = n_packet_string.toInt();
  temperatura = temperatura_string.toFloat();
  temperatura_chart = temperatura;
  humedad = humedad_string.toFloat();
  humedad_chart = humedad;

  // Imprimir los resultados
  Serial.println("nro_packet: " + String(nro_packet));
  Serial.println("temperatura: " + String(temperatura));
  Serial.println("humedad: " + String(humedad));
    

  rssi = "RSSI " + String(LoRa.packetRssi(), DEC) ;
  LoRapacket();
}


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //WIFI Kit series V1 not support Vext control
  Heltec.begin(true /*DisplayEnable Enable*/, true /*Heltec.Heltec.Heltec.LoRa Disable*/, true /*Serial Enable*/, true /*PABOOST Enable*/, BAND /*long BAND*/);
 
  Heltec.display->init();
  Heltec.display->flipScreenVertically();  
  Heltec.display->setFont(ArialMT_Plain_10);
  logo();
  delay(1500);
  Heltec.display->clear();
  
  Heltec.display->drawString(0, 0, "Heltec.LoRa Initial success!");
  Heltec.display->drawString(0, 10, "Wait for incoming packet...");
  Heltec.display->display();
  delay(1000);
  //LoRa.onReceive(cbk);
  LoRa.receive();
  
}

void loop() {
  ArduinoCloud.update();
  int packetSize = LoRa.parsePacket();
  if (packetSize) { cbk(packetSize);  }
  delay(10);
}

/*
  Since Temperatura is READ_WRITE variable, onTemperaturaChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperaturaChange()  {
  // Add your code here to act upon Temperatura change
}
/*
  Since Presion is READ_WRITE variable, onPresionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPresionChange()  {
  // Add your code here to act upon Presion change
}


/*
  Since Humedad is READ_WRITE variable, onHumedadChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumedadChange()  {
  // Add your code here to act upon Humedad change
}

/*
  Since Altitud is READ_WRITE variable, onAltitudChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAltitudChange()  {
  // Add your code here to act upon Altitud change
}




